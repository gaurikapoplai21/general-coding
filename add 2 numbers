/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
    {
        int carry = 0;
        struct ListNode* h1 = l1;
        struct ListNode* h2 = l2;
        struct ListNode* n = new ListNode;
        struct ListNode* temp = n;
        struct ListNode* prev;
        while(h1 && h2)
        {
            
            int x = (h1->val) + (h2->val)+carry;
            if(x > 9)
            {
                n -> val = (x%10);
                carry = x/10;
            }
            else
            {
                n -> val = x;
                carry = 0;
            }
            h1 = h1->next;
            h2 = h2->next;
            prev = n;
            n -> next = new ListNode;
            n = n->next;
            
        }
        if(h1)
        {   
            while(h1)
            {
            int x = (h1->val)+carry;
            if(x > 9)
            {
                n -> val = (x%10);
                carry = x/10;
            }
            else
            {
                n -> val = x;
                carry = 0;
            }
            h1 = h1->next;
            prev = n;
            n->next = new ListNode; 
            n = n->next; 
            }
            
            
        }
        if(h2)
        {
            while(h2)
            {
            int x = (h2->val)+carry;
            if(x > 9)
            {
                n -> val = (x%10);
                carry = x/10;
            }
            else
            {
                n -> val = x;
                carry = 0;
            }
                h2 = h2->next;
                prev = n;
                n->next = new ListNode; 
                n = n->next;
                
            }
        }
        if(carry!=0)
        {
            n->val = carry;
            n->next = NULL;
        }
        else
        {
            prev->next = NULL;
            delete(n);
        }
       
        return temp;
    }
};
