class Solution {
public:
    static int binarysearch(int s,int e,int target,vector<int> nums)
    {   int mid;
        while(s<=e)
        {
            mid = s + (e-s)/2;
            if(nums[mid]==target)
            {
                return mid;
            }
            else if(target<nums[mid])
            {
                e = mid - 1;
            }
            else
            {
                s = mid + 1;
            }
            
        }
     return -1;
    }
    int search(vector<int>& nums, int target) 
    {
        int start = 0;
        int end = nums.size() - 1;
        while(start <= end)
        {
            int mid = start + (end - start)/2;
            if((mid+1<nums.size() && nums[mid+1]<nums[mid]) || mid==nums.size()-1)
            {
                int pivot = mid;
                if(target == nums[mid])
                {
                    return pivot;
                }
                else if(pivot - 1>=0 && (target>=nums[0] && target<=nums[pivot-1]))
                {
                    int ans = binarysearch(0,pivot-1,target,nums);
                    return ans;
    
                }
                else if(pivot + 1<nums.size() && (target>=nums[pivot+1] && target<=nums[nums.size()-1]))
                {
                    int ans = binarysearch(pivot+1,nums.size()-1,target,nums);
                    return ans;
                }
                else
                {
                    return -1;
                }
                    
            }
            else if(nums[mid]<nums[0])
            {
                end = mid - 1;
            }
            else
            {
                start = mid + 1;
            }
        }
        return -1;
    }
};
